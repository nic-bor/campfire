{"id":"../node_modules/mux.js/lib/codecs/h264.js","dependencies":[{"name":"/home/nico/src/campfire/assets/package.json","includedInParent":true,"mtime":1568330653753},{"name":"/home/nico/src/campfire/assets/.babelrc","includedInParent":true,"mtime":1568069024188},{"name":"/home/nico/src/campfire/assets/node_modules/mux.js/package.json","includedInParent":true,"mtime":1568150067788},{"name":"../utils/stream.js","loc":{"line":9,"column":21},"parent":"/home/nico/src/campfire/assets/node_modules/mux.js/lib/codecs/h264.js","resolved":"/home/nico/src/campfire/assets/node_modules/mux.js/lib/utils/stream.js"},{"name":"../utils/exp-golomb.js","loc":{"line":10,"column":24},"parent":"/home/nico/src/campfire/assets/node_modules/mux.js/lib/codecs/h264.js","resolved":"/home/nico/src/campfire/assets/node_modules/mux.js/lib/utils/exp-golomb.js"}],"generated":{"js":"/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\n\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function() {\n  var\n    syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n\n  /*\n   * Scans a byte stream and triggers a data event with the NAL units found.\n   * @param {Object} data Event received from H264Stream\n   * @param {Uint8Array} data.data The h264 byte stream to be scanned\n   *\n   * @see H264Stream.push\n   */\n  this.push = function(data) {\n    var swapBuffer;\n\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n      case 0:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0) {\n          i += 2;\n          break;\n        } else if (buffer[i - 2] !== 0) {\n          i++;\n          break;\n        }\n\n        // deliver the NAL unit if it isn't empty\n        if (syncPoint + 3 !== i - 2) {\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        }\n\n        // drop trailing zeroes\n        do {\n          i++;\n        } while (buffer[i] !== 1 && i < buffer.length);\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0 ||\n            buffer[i - 2] !== 0) {\n          i += 3;\n          break;\n        }\n\n        // deliver the NAL unit\n        this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        i += 3;\n        break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n\n  this.flush = function() {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function() {\n  var\n    nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n\n  H264Stream.prototype.init.call(this);\n  self = this;\n\n  /*\n   * Pushes a packet from a stream onto the NalByteStream\n   *\n   * @param {Object} packet - A packet received from a stream\n   * @param {Uint8Array} packet.data - The raw bytes of the packet\n   * @param {Number} packet.dts - Decode timestamp of the packet\n   * @param {Number} packet.pts - Presentation timestamp of the packet\n   * @param {Number} packet.trackId - The id of the h264 track this packet came from\n   * @param {('video'|'audio')} packet.type - The type of packet\n   *\n   */\n  this.push = function(packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n\n    nalByteStream.push(packet);\n  };\n\n  /*\n   * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n   * for the NALUs to the next stream component.\n   * Also, preprocess caption and sequence parameter NALUs.\n   *\n   * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n   * @see NalByteStream.push\n   */\n  nalByteStream.on('data', function(data) {\n    var\n      event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data\n      };\n\n    switch (data[0] & 0x1f) {\n    case 0x05:\n      event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n      break;\n    case 0x06:\n      event.nalUnitType = 'sei_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      break;\n    case 0x07:\n      event.nalUnitType = 'seq_parameter_set_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      event.config = readSequenceParameterSet(event.escapedRBSP);\n      break;\n    case 0x08:\n      event.nalUnitType = 'pic_parameter_set_rbsp';\n      break;\n    case 0x09:\n      event.nalUnitType = 'access_unit_delimiter_rbsp';\n      break;\n\n    default:\n      break;\n    }\n    // This triggers data on the H264Stream\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function() {\n    self.trigger('done');\n  });\n\n  this.flush = function() {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function(count, expGolombDecoder) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function(data) {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder, profileIdc, levelIdc, profileCompatibility,\n      chromaFormatIdc, picOrderCntType,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1: sarRatio = [1, 1]; break;\n          case 2: sarRatio = [12, 11]; break;\n          case 3: sarRatio = [10, 11]; break;\n          case 4: sarRatio = [16, 11]; break;\n          case 5: sarRatio = [40, 33]; break;\n          case 6: sarRatio = [24, 11]; break;\n          case 7: sarRatio = [20, 11]; break;\n          case 8: sarRatio = [32, 11]; break;\n          case 9: sarRatio = [80, 33]; break;\n          case 10: sarRatio = [18, 11]; break;\n          case 11: sarRatio = [15, 11]; break;\n          case 12: sarRatio = [64, 33]; break;\n          case 13: sarRatio = [160, 99]; break;\n          case 14: sarRatio = [4, 3]; break;\n          case 15: sarRatio = [3, 2]; break;\n          case 16: sarRatio = [2, 1]; break;\n          case 255: {\n            sarRatio = [expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte(),\n                        expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte() ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - (frameCropTopOffset * 2) - (frameCropBottomOffset * 2)\n    };\n  };\n\n};\nH264Stream.prototype = new Stream();\n\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/mux.js/lib/codecs/h264.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}}],"sources":{"../node_modules/mux.js/lib/codecs/h264.js":"/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\n\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function() {\n  var\n    syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n\n  /*\n   * Scans a byte stream and triggers a data event with the NAL units found.\n   * @param {Object} data Event received from H264Stream\n   * @param {Uint8Array} data.data The h264 byte stream to be scanned\n   *\n   * @see H264Stream.push\n   */\n  this.push = function(data) {\n    var swapBuffer;\n\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n      case 0:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0) {\n          i += 2;\n          break;\n        } else if (buffer[i - 2] !== 0) {\n          i++;\n          break;\n        }\n\n        // deliver the NAL unit if it isn't empty\n        if (syncPoint + 3 !== i - 2) {\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        }\n\n        // drop trailing zeroes\n        do {\n          i++;\n        } while (buffer[i] !== 1 && i < buffer.length);\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0 ||\n            buffer[i - 2] !== 0) {\n          i += 3;\n          break;\n        }\n\n        // deliver the NAL unit\n        this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        i += 3;\n        break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n\n  this.flush = function() {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function() {\n  var\n    nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n\n  H264Stream.prototype.init.call(this);\n  self = this;\n\n  /*\n   * Pushes a packet from a stream onto the NalByteStream\n   *\n   * @param {Object} packet - A packet received from a stream\n   * @param {Uint8Array} packet.data - The raw bytes of the packet\n   * @param {Number} packet.dts - Decode timestamp of the packet\n   * @param {Number} packet.pts - Presentation timestamp of the packet\n   * @param {Number} packet.trackId - The id of the h264 track this packet came from\n   * @param {('video'|'audio')} packet.type - The type of packet\n   *\n   */\n  this.push = function(packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n\n    nalByteStream.push(packet);\n  };\n\n  /*\n   * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n   * for the NALUs to the next stream component.\n   * Also, preprocess caption and sequence parameter NALUs.\n   *\n   * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n   * @see NalByteStream.push\n   */\n  nalByteStream.on('data', function(data) {\n    var\n      event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data\n      };\n\n    switch (data[0] & 0x1f) {\n    case 0x05:\n      event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n      break;\n    case 0x06:\n      event.nalUnitType = 'sei_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      break;\n    case 0x07:\n      event.nalUnitType = 'seq_parameter_set_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      event.config = readSequenceParameterSet(event.escapedRBSP);\n      break;\n    case 0x08:\n      event.nalUnitType = 'pic_parameter_set_rbsp';\n      break;\n    case 0x09:\n      event.nalUnitType = 'access_unit_delimiter_rbsp';\n      break;\n\n    default:\n      break;\n    }\n    // This triggers data on the H264Stream\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function() {\n    self.trigger('done');\n  });\n\n  this.flush = function() {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function(count, expGolombDecoder) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function(data) {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder, profileIdc, levelIdc, profileCompatibility,\n      chromaFormatIdc, picOrderCntType,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1: sarRatio = [1, 1]; break;\n          case 2: sarRatio = [12, 11]; break;\n          case 3: sarRatio = [10, 11]; break;\n          case 4: sarRatio = [16, 11]; break;\n          case 5: sarRatio = [40, 33]; break;\n          case 6: sarRatio = [24, 11]; break;\n          case 7: sarRatio = [20, 11]; break;\n          case 8: sarRatio = [32, 11]; break;\n          case 9: sarRatio = [80, 33]; break;\n          case 10: sarRatio = [18, 11]; break;\n          case 11: sarRatio = [15, 11]; break;\n          case 12: sarRatio = [64, 33]; break;\n          case 13: sarRatio = [160, 99]; break;\n          case 14: sarRatio = [4, 3]; break;\n          case 15: sarRatio = [3, 2]; break;\n          case 16: sarRatio = [2, 1]; break;\n          case 255: {\n            sarRatio = [expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte(),\n                        expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte() ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - (frameCropTopOffset * 2) - (frameCropBottomOffset * 2)\n    };\n  };\n\n};\nH264Stream.prototype = new Stream();\n\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};\n"},"lineCount":452}},"error":null,"hash":"3a067fb211c6a97f381ece1ff2e07a90","cacheData":{"env":{}}}